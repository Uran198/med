upstream med_app_server {
# fail_timeout=0 means we always retry an upstream even if it failed
# to return a good HTTP response (in case the Unicorn master nukes a
# single worker for timing out).

server unix:/django/jacob/run/gunicorn.sock fail_timeout=0;
}

server {
	listen 80;
	server_name www.medvoloc.tk;
	return 301 https://medvoloc.tk$request_uri;
}

server {
	listen 80;
	server_name medvoloc.tk;
	return 301 https://medvoloc.tk$request_uri;
}

server {
	listen 443 ssl;

	# certs sent to the client in SERVER HELLO are concatenated in ssl_certificate
	ssl_certificate /etc/letsencrypt/live/medvoloc.tk/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/medvoloc.tk/privkey.pem;
	ssl_session_timeout 1d;
	ssl_session_cache shared:SSL:50m;

	# Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
	# openssl dhparam -out dhparam.pem 2048
	ssl_dhparam /etc/nginx/dhparam.pem;

	# modern configuration. tweak to your needs.
	ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
	ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK';
	ssl_prefer_server_ciphers on;

	# HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
	add_header Strict-Transport-Security max-age=15768000;

	# OCSP Stapling ---
	# fetch OCSP records from URL in ssl_certificate and cache them
	ssl_stapling on;
	ssl_stapling_verify on;

	## verify chain of trust of OCSP response using Root CA and Intermediate certs
	ssl_trusted_certificate /etc/letsencrypt/live/medvoloc.tk/chain.pem;
	resolver 8.8.8.8 8.8.4.4 valid=86400;
	resolver_timeout 10;

#######################
	server_name medvoloc.tk;

	client_max_body_size 4G;

	access_log /django/jacob/logs/nginx-access.log;
	error_log /django/jacob/logs/nginx-error.log;

	location /media/ {
		alias   /django/jacob/med/med/media/;
	}

# Deny illegal Host headers
	if ($host !~* ^(medvoloc.tk|www.medvoloc.tk)$ ) {
		return 444;
	}

	location / {
# an HTTP header important enough to have its own Wikipedia entry:
#   http://en.wikipedia.org/wiki/X-Forwarded-For
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

# enable this if and only if you use HTTPS, this helps Rack
# set the proper protocol for doing redirects:
# proxy_set_header X-Forwarded-Proto https;

# pass the Host: header from the client right along so redirects
# can be set properly within the Rack application
		proxy_set_header Host $host;

# we don't want nginx trying to do something clever with
# redirects, we set the Host: header above already.
		proxy_redirect off;

# Needed ssl
		proxy_set_header X-Forwarded-Proto $scheme;

# set "proxy_buffering off" *only* for Rainbows! when doing
# Comet/long-poll stuff.  It's also safe to set if you're
# using only serving fast clients with Unicorn + nginx.
# Otherwise you _want_ nginx to buffer responses to slow
# clients, really.
# proxy_buffering off;

# Try to serve static files from nginx, no point in making an
# *application* server like Unicorn/Rainbows! serve static files.
		if (!-f $request_filename) {
			proxy_pass http://med_app_server;
			break;
		}
	}

# Error pages
# error_page 500 502 503 504 /500.html;
# location = /500.html {
#     root /webapps/hello_django/static/;
# }
}
