Making SSL certificate
======================

It's easy and free!
-------------------

###Here we go:
On the moment of writing let's encrypt in public beta so things will probably change.
Here is presented a summary of steps I had to take and my configuration.

[1]For generating nginx configuration:
https://mozilla.github.io/server-side-tls/ssl-config-generator/

[2]Inspiration blogpost:
https://blog.rudeotter.com/lets-encrypt-ssl-certificate-nginx-ubuntu/

[3]Let's encrypt:
https://letsencrypt.org/howitworks/ ::
    $ git clone https://github.com/letsencrypt/letsencrypt
    $ cd letsencrypt
    $ ./letsencrypt-auto --help

You may be required to stop your server to proceed. Grab a certificate for your domain ::

    ./letsencrypt-auto certonly --standalone -d example.com -d www.example.com

Here is nginx configuration generated by [2]::

    server {
        listen 443 ssl;

        # certs sent to the client in SERVER HELLO are concatenated in ssl_certificate
        ssl_certificate /path/to/signed_cert_plus_intermediates; #fullchain.pem
        ssl_certificate_key /path/to/private_key; #privkey.pem
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:50m;


        # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
        # openssl dhparam -out dhparam.pem 2048
        ssl_dhparam /path/to/dhparam.pem;

        # intermediate configuration. tweak to your needs.
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:ECDHE-RSA-DES-CBC3-SHA:ECDHE-ECDSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
        ssl_prefer_server_ciphers on;

        # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
        add_header Strict-Transport-Security max-age=15768000;

        # OCSP Stapling ---
        # fetch OCSP records from URL in ssl_certificate and cache them
        ssl_stapling on;
        ssl_stapling_verify on;

        ## verify chain of trust of OCSP response using Root CA and Intermediate certs
        ssl_trusted_certificate /path/to/root_CA_cert_plus_intermediates; # chain.pem

        resolver <IP DNS resolver>;
        # I used:
        # resolver 8.8.8.8 8.8.4.4 valid=86400;
        # resolver_timeout 10;
    }

Also, to ensure that Django will be sure he is after secure connection, add(https://docs.djangoproject.com/en/1.9/ref/middleware/#module-django.middleware.security, https://www.digitalocean.com/community/questions/ssl-security-https-in-django-one-click-install-configuration)::

    server {
        location / {
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

That's basically it! Isn't it great!?
